import numpy as np
import matplotlib.pyplot as plt
from sympy import *


x, n, h = symbols("x"), None, None
init_printing()


print(
    f"""
# .B√†i to√°n:
    T√¨m ùúÜ v√† u(x) l√† nghi·ªám c·ªßa ph∆∞∆°ng tr√¨nh vi ph√¢n :
    [p(x) * u'(x)]' - q(x) * u(x) = ùúÜ*r(x)*u(x) v·ªõi a < x < b
    Trong ƒë√≥ : (#.ƒêi·ªÅu ki·ªán)
    # #.  p(x), q(x), r(x) l√† nh·ªØng h√†m s·ªë li√™n t·ª•c v√† c√≥ ƒë·∫°o h√†m c·∫•p c·∫ßn thi·∫øt tr√™n ƒëo·∫°n [a, b]
    # # .p(x) >= c1 > 0
    # # .q(x) >= 0
    # # .r(x) > 0
# .INPUT:
    p(x), q(x), r(x)
    a, b
    u(a) := U_a, u(b) := U_b

    V√† th√™m n l√† s·ªë m·ªëc => h = (b - a) / (n - 1)
    Ho·∫∑c th√™m h l√† kho·∫£ng c√°ch l∆∞·ªõi => n = int(1 + (b - a) / h)
"""
)


def p(x):
    # .Kh√¥ng c√≥ d·∫•u -
    return 1


def q(x):
    # .C√≥ d·∫•u - trong ƒë·ªÅ b√†i
    return x**2


def r(x):
    # .Kh√¥ng c√≥ d·∫•u -
    return 2


a = -1
b = 1
U_a = 0
U_b = 0
# Th√™m n ho·∫∑c h
h = 1 / 2
# n=5
# .T√≠nh n, h theo ƒë·ªÅ b√†i cho:
# n l√† s·ªë m·ªëc => h = (b - a) / (n - 1)
# Ho·∫∑c
# h l√† kho·∫£ng c√°ch l∆∞·ªõi => n = int(1 + (b - a) / h)
if (n is None) and (h is None):
    raise ValueError("Ph·∫£i c√≥ gi√° tr·ªã n ho·∫∑c h")
if (n is not None) and (h is not None):
    raise ValueError("Ch·ªâ c√≥ gi√° tr·ªã n ho·∫∑c h")
if n is not None:
    h = (b - a) / (n - 1)
    str_n_h = f"V√¨ n = {n} => h = {h}"
else:
    n = (b - a) / h + 1
    str_n_h = f"V√¨ h = {h} => n = {n}"
    n = int(n)
    str_n_h += f" => n = {n}"

print(
    f""" 
# .INPUT:
    p(x) = {p(x)}
    q(x) = {q(x)}
    r(x) = {r(x)}
    a = {a}
    b = {b}
    u(a) = {U_a}
    u(b) = {U_b} 
    {str_n_h}      
"""
)
# => Xong INPUT
print(
    f"""
# .X√©t ƒëi·ªÅu ki·ªán:
   Trong ƒë√≥ : (#.ƒêi·ªÅu ki·ªán)
    # #.  p(x), q(x), r(x) l√† nh·ªØng h√†m s·ªë li√™n t·ª•c v√† c√≥ ƒë·∫°o h√†m c·∫•p c·∫ßn thi·∫øt tr√™n ƒëo·∫°n [a, b]
    # # .p(x) >= c1 > 0
    # # .q(x) >= 0
    # # .r(x) > 0
"""
)


def ox(x):
    return 0


x = np.linspace(a, b, 1000)
y_p = np.array([p(i) for i in x])
y_q = np.array([q(i) for i in x])
y_r = np.array([r(i) for i in x])
y_ox = np.array([ox(i) for i in x])
min_y_p = min(y_p)
min_y_q = min(y_q)
min_y_r = min(y_r)
plt.plot(x, y_p, label=f"p(x); min={min_y_p}>0; ({min_y_p>0})")
plt.plot(x, y_q, label=f"q(x); min={min_y_q}>=0; ({min_y_q>=0})")
plt.plot(x, y_r, label=f"r(x); min={min_y_r}>0; ({min_y_r>0})")
plt.plot(x, y_ox, label="ox: y = 0")
plt.legend()
print(f"p(x) >= {min_y_p} > 0 ({min_y_p>0})")
print(f"q(x) >= {min_y_q} >= 0 ({min_y_q>=0})")
print(f"r(x) >= {min_y_r} >= 0 ({min_y_r>0})")
if (min_y_p > 0) and (min_y_q >= 0) and (min_y_r > 0):
    print(f"=> C√≥ th·ªèa m√£n ƒëi·ªÅu ki·ªán")
else:
    raise ValueError(f"=> Ko th·ªèa m√£n ƒëi·ªÅu ki·ªán")
plt.show()


print(
    f"""
# .X√¢y d·ª±ng h·ªá c√≥ d·∫°ng 3 ƒë∆∞·ªùng ch√©o theo c√¥ng th·ª©c 
"""
)

matrix = np.zeros((n, n))
for i in range(n):
    x_i = a + h * (i + 1)
    if i != 0:
        matrix[i, i - 1] = -p(x_i - h / 2) / (h * h * r(x_i))
    matrix[i, i] = (p(x_i + h / 2) + p(x_i - h / 2)) / (h * h * r(x_i)) - q(x_i) / r(
        x_i
    )
    if i != n - 1:
        matrix[i, i + 1] = -p(x_i + h / 2) / (h * h * r(x_i))


tri_rieng, vecto_rieng = np.linalg.eig(matrix)

for id in range(n):
    Œª = tri_rieng[id]
    print(f"V·ªõi tr·ªã ri√™ng Œª = {Œª}")
    points = np.zeros((n, 2))
    for i in range(n):
        x_i = a + h * (i + 1)
        points[i, 0] = x_i
        points[i, 1] = vecto_rieng[i, id] / vecto_rieng[0, id]
        print("(", points[i, 0], ", ", points[i, 1], ")") 
 